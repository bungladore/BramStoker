package mrflvhead.parts{		import flash.display.Bitmap;	import flash.display.Graphics;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;		import mrflvhead.events.ScrubEvent;
		public class LoadProgress extends Sprite{				private var _load_progress:Object;		private var _mask:Sprite;		private var _container:Sprite;		private var _default_progress:Object;				public function LoadProgress(load_progress:Object = null)		{			super();						_default_progress = {color:0xFF9988, w:200, h:50};						_container = new Sprite();			addChild(_container);						if(load_progress){//if user defined				_load_progress = load_progress;			}else{//default to case				_load_progress = _default_progress;			}						trace("_load progress " + _load_progress.w)						_mask = new Sprite();			_mask.addChild(drawRect(_load_progress));						if(load_progress is Bitmap){				_container.addChild(Bitmap(_load_progress));				_mask.width = _container.width;			}else{				_container.addChild(drawRect(_load_progress));			}						addChild(_mask);			_container.mask = _mask;			/*_container.x = -_container.width;*/			_mask.x = -_mask.width;						enableScrub();		}				private function enableScrub():void		{			//scrubs to position... based on initial mouse click			_container.addEventListener(MouseEvent.MOUSE_DOWN, scrubHere, false, 0, true);			//scrubs more based on the drag of the mouse			_container.addEventListener(MouseEvent.MOUSE_MOVE, dragHere, false, 0, true);			_container.buttonMode = true;		}				private function scrubHere(e:MouseEvent):void{			dispatchEvent(new Event("GOOGLE_SCRUB", true)); 			var pct:Number = getScrubPCT(e.currentTarget.mouseX);			var evt:ScrubEvent = new ScrubEvent(ScrubEvent.ON_SCRUB_HERE, {scrub_pct:pct});			dispatchEvent(evt);		}				private function dragHere(e:MouseEvent):void{			if(e.buttonDown){				var pct:Number = getScrubPCT(e.currentTarget.mouseX);				var evt:ScrubEvent = new ScrubEvent(ScrubEvent.ON_SCRUB_HERE, {scrub_pct:pct});				dispatchEvent(evt);			}		}				public function reset():void		{			_mask.x = -_mask.width;		}				private function getScrubPCT(mouse_x:Number):Number{			return Math.round(100*mouse_x/_mask.width)/100;		}				//updates the load progress based on the time vs duration of the flv player		public function updateProgress(pct:Number):void		{			_mask.x = -_mask.width + (pct*(_mask.width));		}				private function drawRect(load_progress:Object):Shape		{			trace("drawing the rectangle", load_progress.w)			var child:Shape = new Shape();			child.graphics.beginFill(load_progress.color);			/*child.graphics.lineStyle(borderSize, borderColor);*/			child.graphics.drawRect(0, 0, load_progress.w, load_progress.h);			child.graphics.endFill();			return child;		}	}}