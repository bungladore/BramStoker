package mrflvhead.parts{	import flash.display.Sprite;	import flash.display.Bitmap;	import flash.events.Event;	import flash.display.Graphics;	import flash.display.Shape;		public class PlayProgress extends Sprite	{				private var _play_progress:Object;		public var _mask:Sprite;		private var _container:Sprite;		private var _default_progress:Object;				public function PlayProgress(play_progress:Object = null)		{			super();						_default_progress = {color:0xFF0044, w:200, h:50};						_container = new Sprite();			addChild(_container);						if(play_progress){//if user defined				_play_progress = play_progress;			}else{//default to case				_play_progress = _default_progress;			}						_mask = new Sprite();			_mask.addChild(drawRect(_play_progress));						if(play_progress is Bitmap){				_play_progress = play_progress;				_container.addChild(Bitmap(_play_progress));				_mask.width = _container.width;			}else{				_container.addChild(drawRect(_play_progress));			}						addChild(_mask);			_container.mask = _mask;			/*_container.x = -_container.width;*/			_mask.x = -_mask.width;						//play progress is for display only -- any scrubbing will use the loading bar			mouseEnabled = false;			mouseChildren = false;		}				//updates the video progress based on the time vs duration of the flv player		public function updateProgress(pct:Number):void		{			_mask.x = -_mask.width + (pct*(_mask.width));		}				public function reset():void		{			_mask.x = -_mask.width;		}				private function drawRect(play_progress:Object):Shape		{			var child:Shape = new Shape();			child.graphics.beginFill(play_progress.color);			/*child.graphics.lineStyle(borderSize, borderColor);*/			child.graphics.drawRect(0, 0, play_progress.w, play_progress.h);			child.graphics.endFill();			return child;		}	}}